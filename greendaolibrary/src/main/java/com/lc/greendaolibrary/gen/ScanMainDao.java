package com.lc.greendaolibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lc.greendaolibrary.dao.scan.ScanMain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAN_MAIN".
*/
public class ScanMainDao extends AbstractDao<ScanMain, Long> {

    public static final String TABLENAME = "SCAN_MAIN";

    /**
     * Properties of entity ScanMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MainID = new Property(0, Long.class, "mainID", true, "_id");
        public final static Property ScanType = new Property(1, String.class, "scanType", false, "SCAN_TYPE");
        public final static Property State = new Property(2, int.class, "state", false, "STATE");
        public final static Property TransportBillCode = new Property(3, String.class, "transportBillCode", false, "TRANSPORT_BILL_CODE");
        public final static Property TransportBillType = new Property(4, String.class, "transportBillType", false, "TRANSPORT_BILL_TYPE");
        public final static Property BeginScanTime = new Property(5, String.class, "beginScanTime", false, "BEGIN_SCAN_TIME");
        public final static Property ScanCompany = new Property(6, String.class, "scanCompany", false, "SCAN_COMPANY");
        public final static Property ScanOperator = new Property(7, String.class, "scanOperator", false, "SCAN_OPERATOR");
        public final static Property ReceiveCompany = new Property(8, String.class, "receiveCompany", false, "RECEIVE_COMPANY");
        public final static Property TransportBillLine = new Property(9, String.class, "transportBillLine", false, "TRANSPORT_BILL_LINE");
        public final static Property CarNumber = new Property(10, String.class, "carNumber", false, "CAR_NUMBER");
        public final static Property DriverName = new Property(11, String.class, "driverName", false, "DRIVER_NAME");
        public final static Property SealTime = new Property(12, String.class, "sealTime", false, "SEAL_TIME");
        public final static Property IsUpload = new Property(13, boolean.class, "isUpload", false, "IS_UPLOAD");
    }

    private DaoSession daoSession;


    public ScanMainDao(DaoConfig config) {
        super(config);
    }
    
    public ScanMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAN_MAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: mainID
                "\"SCAN_TYPE\" TEXT," + // 1: scanType
                "\"STATE\" INTEGER NOT NULL ," + // 2: state
                "\"TRANSPORT_BILL_CODE\" TEXT," + // 3: transportBillCode
                "\"TRANSPORT_BILL_TYPE\" TEXT," + // 4: transportBillType
                "\"BEGIN_SCAN_TIME\" TEXT," + // 5: beginScanTime
                "\"SCAN_COMPANY\" TEXT," + // 6: scanCompany
                "\"SCAN_OPERATOR\" TEXT," + // 7: scanOperator
                "\"RECEIVE_COMPANY\" TEXT," + // 8: receiveCompany
                "\"TRANSPORT_BILL_LINE\" TEXT," + // 9: transportBillLine
                "\"CAR_NUMBER\" TEXT," + // 10: carNumber
                "\"DRIVER_NAME\" TEXT," + // 11: driverName
                "\"SEAL_TIME\" TEXT," + // 12: sealTime
                "\"IS_UPLOAD\" INTEGER NOT NULL );"); // 13: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAN_MAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScanMain entity) {
        stmt.clearBindings();
 
        Long mainID = entity.getMainID();
        if (mainID != null) {
            stmt.bindLong(1, mainID);
        }
 
        String scanType = entity.getScanType();
        if (scanType != null) {
            stmt.bindString(2, scanType);
        }
        stmt.bindLong(3, entity.getState());
 
        String transportBillCode = entity.getTransportBillCode();
        if (transportBillCode != null) {
            stmt.bindString(4, transportBillCode);
        }
 
        String transportBillType = entity.getTransportBillType();
        if (transportBillType != null) {
            stmt.bindString(5, transportBillType);
        }
 
        String beginScanTime = entity.getBeginScanTime();
        if (beginScanTime != null) {
            stmt.bindString(6, beginScanTime);
        }
 
        String scanCompany = entity.getScanCompany();
        if (scanCompany != null) {
            stmt.bindString(7, scanCompany);
        }
 
        String scanOperator = entity.getScanOperator();
        if (scanOperator != null) {
            stmt.bindString(8, scanOperator);
        }
 
        String receiveCompany = entity.getReceiveCompany();
        if (receiveCompany != null) {
            stmt.bindString(9, receiveCompany);
        }
 
        String transportBillLine = entity.getTransportBillLine();
        if (transportBillLine != null) {
            stmt.bindString(10, transportBillLine);
        }
 
        String carNumber = entity.getCarNumber();
        if (carNumber != null) {
            stmt.bindString(11, carNumber);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(12, driverName);
        }
 
        String sealTime = entity.getSealTime();
        if (sealTime != null) {
            stmt.bindString(13, sealTime);
        }
        stmt.bindLong(14, entity.getIsUpload() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScanMain entity) {
        stmt.clearBindings();
 
        Long mainID = entity.getMainID();
        if (mainID != null) {
            stmt.bindLong(1, mainID);
        }
 
        String scanType = entity.getScanType();
        if (scanType != null) {
            stmt.bindString(2, scanType);
        }
        stmt.bindLong(3, entity.getState());
 
        String transportBillCode = entity.getTransportBillCode();
        if (transportBillCode != null) {
            stmt.bindString(4, transportBillCode);
        }
 
        String transportBillType = entity.getTransportBillType();
        if (transportBillType != null) {
            stmt.bindString(5, transportBillType);
        }
 
        String beginScanTime = entity.getBeginScanTime();
        if (beginScanTime != null) {
            stmt.bindString(6, beginScanTime);
        }
 
        String scanCompany = entity.getScanCompany();
        if (scanCompany != null) {
            stmt.bindString(7, scanCompany);
        }
 
        String scanOperator = entity.getScanOperator();
        if (scanOperator != null) {
            stmt.bindString(8, scanOperator);
        }
 
        String receiveCompany = entity.getReceiveCompany();
        if (receiveCompany != null) {
            stmt.bindString(9, receiveCompany);
        }
 
        String transportBillLine = entity.getTransportBillLine();
        if (transportBillLine != null) {
            stmt.bindString(10, transportBillLine);
        }
 
        String carNumber = entity.getCarNumber();
        if (carNumber != null) {
            stmt.bindString(11, carNumber);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(12, driverName);
        }
 
        String sealTime = entity.getSealTime();
        if (sealTime != null) {
            stmt.bindString(13, sealTime);
        }
        stmt.bindLong(14, entity.getIsUpload() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(ScanMain entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScanMain readEntity(Cursor cursor, int offset) {
        ScanMain entity = new ScanMain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mainID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scanType
            cursor.getInt(offset + 2), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // transportBillCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // transportBillType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // beginScanTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // scanCompany
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scanOperator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiveCompany
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // transportBillLine
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // carNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // driverName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sealTime
            cursor.getShort(offset + 13) != 0 // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScanMain entity, int offset) {
        entity.setMainID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScanType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setState(cursor.getInt(offset + 2));
        entity.setTransportBillCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTransportBillType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBeginScanTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScanCompany(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScanOperator(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiveCompany(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTransportBillLine(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCarNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDriverName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSealTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsUpload(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScanMain entity, long rowId) {
        entity.setMainID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScanMain entity) {
        if(entity != null) {
            return entity.getMainID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScanMain entity) {
        return entity.getMainID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
