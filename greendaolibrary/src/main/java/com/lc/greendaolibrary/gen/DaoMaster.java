package com.lc.greendaolibrary.gen;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 2): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 2;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AdvanceInfoDao.createTable(db, ifNotExists);
        AdvancePaymentDao.createTable(db, ifNotExists);
        AdviceShipmentDao.createTable(db, ifNotExists);
        CreateOrderDefaultDao.createTable(db, ifNotExists);
        DeliveryDao.createTable(db, ifNotExists);
        DeliveryModeDao.createTable(db, ifNotExists);
        GoodsSourceDao.createTable(db, ifNotExists);
        GoodsTypeDao.createTable(db, ifNotExists);
        NoticeDao.createTable(db, ifNotExists);
        PackageTypeDao.createTable(db, ifNotExists);
        PaymentDao.createTable(db, ifNotExists);
        ReceiveCountryDao.createTable(db, ifNotExists);
        SenderCountryDao.createTable(db, ifNotExists);
        ServiceDao.createTable(db, ifNotExists);
        TypeOrShippingDao.createTable(db, ifNotExists);
        UserInfoDao.createTable(db, ifNotExists);
        ValuationMethodDao.createTable(db, ifNotExists);
        ScanMainDao.createTable(db, ifNotExists);
        ScanSubDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AdvanceInfoDao.dropTable(db, ifExists);
        AdvancePaymentDao.dropTable(db, ifExists);
        AdviceShipmentDao.dropTable(db, ifExists);
        CreateOrderDefaultDao.dropTable(db, ifExists);
        DeliveryDao.dropTable(db, ifExists);
        DeliveryModeDao.dropTable(db, ifExists);
        GoodsSourceDao.dropTable(db, ifExists);
        GoodsTypeDao.dropTable(db, ifExists);
        NoticeDao.dropTable(db, ifExists);
        PackageTypeDao.dropTable(db, ifExists);
        PaymentDao.dropTable(db, ifExists);
        ReceiveCountryDao.dropTable(db, ifExists);
        SenderCountryDao.dropTable(db, ifExists);
        ServiceDao.dropTable(db, ifExists);
        TypeOrShippingDao.dropTable(db, ifExists);
        UserInfoDao.dropTable(db, ifExists);
        ValuationMethodDao.dropTable(db, ifExists);
        ScanMainDao.dropTable(db, ifExists);
        ScanSubDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AdvanceInfoDao.class);
        registerDaoClass(AdvancePaymentDao.class);
        registerDaoClass(AdviceShipmentDao.class);
        registerDaoClass(CreateOrderDefaultDao.class);
        registerDaoClass(DeliveryDao.class);
        registerDaoClass(DeliveryModeDao.class);
        registerDaoClass(GoodsSourceDao.class);
        registerDaoClass(GoodsTypeDao.class);
        registerDaoClass(NoticeDao.class);
        registerDaoClass(PackageTypeDao.class);
        registerDaoClass(PaymentDao.class);
        registerDaoClass(ReceiveCountryDao.class);
        registerDaoClass(SenderCountryDao.class);
        registerDaoClass(ServiceDao.class);
        registerDaoClass(TypeOrShippingDao.class);
        registerDaoClass(UserInfoDao.class);
        registerDaoClass(ValuationMethodDao.class);
        registerDaoClass(ScanMainDao.class);
        registerDaoClass(ScanSubDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
